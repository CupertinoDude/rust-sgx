commit 537a7bd056d8a5ca753fc73cc7964ae6d95cdbe6
Author: Jethro Beekman <jethro@jbeekman.nl>
Date:   Thu Jan 14 15:57:32 2016 -0800

    Add SGX kernel driver support
    
    * Split memory mappings into kernel and user ranges
    * Swap out encls function for ioctl
    * Add undocumented EEXTEND register param

diff --git a/user/Makefile b/user/Makefile
index 31a37f4..76c895e 100644
--- a/user/Makefile
+++ b/user/Makefile
@@ -18,7 +18,7 @@ OPENSSL_LIBS = $(LIBSGXDIR)/sgx-entry.o $(LIBSGXDIR)/libssl.a \
 # Host code/tool
 SGX_HOST_RUNTIME = sgx-runtime.o sgx-test-runtime.o
 SGX_HOST_OBJS = sgx-user.o sgx-kern.o sgx-kern-epc.o sgx-utils.o sgx-trampoline.o \
-                sgx-crypto.o sgx-loader.o
+                sgx-crypto.o sgx-loader.o sgx-kern-dev.o
 POLARSSL_LIB = libpolarssl.a
 POLARSSL_OBJS = polarssl/rsa.o polarssl/entropy.o polarssl/ctr_drbg.o \
 	            polarssl/bignum.o polarssl/md.o polarssl/oid.o polarssl/asn1parse.o \
diff --git a/user/include/sgx-kern-dev.h b/user/include/sgx-kern-dev.h
new file mode 100644
index 0000000..e4448a7
--- /dev/null
+++ b/user/include/sgx-kern-dev.h
@@ -0,0 +1,4 @@
+void sgx_dev_init();
+void* sgx_dev_get_epc_base();
+void* sgx_dev_map(unsigned int off, unsigned int len);
+void encls(encls_cmd_t leaf, uint64_t rbx, uint64_t rcx, uint64_t rdx, out_regs_t* out);
diff --git a/user/include/sgx-kern-epc.h b/user/include/sgx-kern-epc.h
index dd917f9..f93e4bf 100644
--- a/user/include/sgx-kern-epc.h
+++ b/user/include/sgx-kern-epc.h
@@ -22,13 +22,8 @@
 #define SGX_KERNEL
 #include <sgx.h>
 
-#define EPC_ADDR       0x4fffc000
-
-// linear address is in fact just addr of epc page (physical page)
-static inline
-void* epc_to_vaddr(epc_t *epc) {
-    return epc;
-}
+void* epc_to_uaddr(epc_t *epc);
+static inline void* epc_to_kaddr(epc_t *epc) { return epc; }
 
 typedef enum {
     FREE_PAGE = 0x0,
@@ -41,6 +36,7 @@ typedef enum {
 typedef struct {
     int key;
     epc_type_t type;
+    void* user; // only if type==SECS_PAGE
 } epc_info_t;
 
 
@@ -50,7 +46,7 @@ extern void init_epc(int nepc);
 extern epc_t *get_epc(int key, epc_type_t pt);
 extern epc_t *get_epc_region_beg(void);
 extern epc_t *get_epc_region_end(void);
-extern epc_t *alloc_epc_pages(int npages, int key);
+extern epc_t *alloc_epc_pages(int npages, int key, void** enclave_addr);
 extern epc_t *alloc_epc_page(int key);
 extern void free_epc_pages(epc_t *epc);
 
diff --git a/user/sgx-kern-dev.c b/user/sgx-kern-dev.c
new file mode 100644
index 0000000..ee091e0
--- /dev/null
+++ b/user/sgx-kern-dev.c
@@ -0,0 +1,77 @@
+#include <sys/mman.h>
+#include <sys/ioctl.h>
+#include <fcntl.h>
+#include <stdlib.h>
+#include <sgx.h>
+#include <sgx-kern-dev.h>
+
+int sgxfd=-1;
+
+struct sgx_ioctl_data {
+	union {
+		struct {
+			unsigned long rbx;
+			unsigned long rcx;
+			unsigned long rdx;
+		} /*in*/;
+		struct {
+			int exception;
+			unsigned long data;
+			unsigned long duration_encls;
+			unsigned long duration_copy;
+		} /*out*/;
+	};
+};
+
+#define SGX_IOCTL 'G'
+#define SGX_META_IOCTL 'H'
+#define SGX_IOADDR_IOCTL _IOR(SGX_META_IOCTL, 0x00, struct sgx_ioctl_data)
+
+void sgx_dev_init() {
+    if (sgxfd<0) {
+        sgxfd=open("/dev/sgx", O_RDWR);
+        if (sgxfd<0) {
+            perror("failed to open(/dev/sgx)");
+            exit(EXIT_FAILURE);
+        }
+    }
+}
+
+void* sgx_dev_get_epc_base() {
+	struct sgx_ioctl_data data;
+	if (ioctl(sgxfd, SGX_IOADDR_IOCTL, &data)<0) {
+		perror("ioctl");
+		return MAP_FAILED;
+	}
+	return (void*)data.data;
+}
+
+void* sgx_dev_map(unsigned int off, unsigned int len) {
+	return mmap(NULL,len*PAGE_SIZE,PROT_READ|PROT_WRITE|PROT_EXEC,MAP_SHARED,sgxfd,off*PAGE_SIZE);
+}
+
+// encls() : Execute an encls instruction
+// out_regs store the output value returned from qemu
+void encls(encls_cmd_t leaf, uint64_t rbx, uint64_t rcx,
+           uint64_t rdx, out_regs_t* out)
+{
+	if (leaf>=0x10) return;
+   sgx_dbg(ttrace,
+           "leaf=%d, rbx=0x%"PRIx64", rcx=0x%"PRIx64", rdx=0x%"PRIx64")",
+           leaf, rbx, rcx, rdx);
+
+	struct sgx_ioctl_data data={.rbx=(unsigned long)rbx,.rcx=(unsigned long)rcx,.rdx=(unsigned long)rdx};
+	int ret=ioctl(sgxfd, _IOWR(SGX_IOCTL, leaf, struct sgx_ioctl_data), &data);
+	if (ret < 0) {
+		perror("ioctl");
+		exit(EXIT_FAILURE);
+	}
+	if (data.exception!=-1) {
+		printf("Exception=%d data=%016lx\n",data.exception,data.data);
+		exit(EXIT_FAILURE);
+	}
+
+    if (out != NULL) {
+        out->oeax = data.data;
+    }
+}
diff --git a/user/sgx-kern-epc.c b/user/sgx-kern-epc.c
index a4c473d..7089264 100644
--- a/user/sgx-kern-epc.c
+++ b/user/sgx-kern-epc.c
@@ -28,6 +28,7 @@
 #include <stdint.h>
 
 #include <sgx-kern-epc.h>
+#include <sgx-kern-dev.h>
 
 //
 // NOTE.
@@ -38,14 +39,15 @@ static epc_info_t *g_epc_info;
 static int g_num_epc;
 
 void init_epc(int nepc) {
+    sgx_dev_init();
+
     g_num_epc = nepc;
 
     //toward making g_num_epc configurable
     //g_epc = memalign(PAGE_SIZE, g_num_epc * sizeof(epc_t));
 
-    g_epc = (epc_t *)mmap((void *)EPC_ADDR, g_num_epc * sizeof(epc_t),
-                          PROT_READ|PROT_WRITE,
-                          MAP_PRIVATE|MAP_ANONYMOUS, -1, 0);
+    g_epc = (epc_t*)sgx_dev_get_epc_base();
+
     if(g_epc == MAP_FAILED) {
         perror("EPC ALLOC FAIL");
         exit(EXIT_FAILURE);
@@ -62,7 +64,6 @@ void init_epc(int nepc) {
     if (!g_epc_info)
         err(1, "failed to allocate EPC map in kernel");
 
-    memset(g_epc, 0, g_num_epc * sizeof(epc_t));
     memset(g_epc_info, 0, g_num_epc * sizeof(epc_info_t));
 }
 
@@ -88,6 +89,8 @@ void put_epc_index(int index)
     assert(g_epc_info[index].type != FREE_PAGE);
 
     g_epc_info[index].type = FREE_PAGE;
+    g_epc_info[index].user = NULL;
+    g_epc_info[index].key = 0;
 }
 
 epc_t *get_epc(int key, epc_type_t pt)
@@ -193,11 +196,13 @@ int alloc_epc_index_pages(int npages, int key)
     return beg;
 }
 
-epc_t *alloc_epc_pages(int npages, int key)
+epc_t *alloc_epc_pages(int npages, int key, void** enclave_addr)
 {
     int idx = alloc_epc_index_pages(npages, key);
-    if (idx != -1)
+    if (idx != -1) {
+        *enclave_addr=g_epc_info[idx].user=sgx_dev_map(idx+1,npages-1);
         return &g_epc[idx];
+    }
     return NULL;
 }
 
@@ -218,6 +223,7 @@ void free_reserved_epc_pages(epc_t *epc)
         if (g_epc_info[i].key == key && g_epc_info[i].type == RESERVED) {
             g_epc_info[i].key = 0;
             g_epc_info[i].type = FREE_PAGE;
+            g_epc_info[i].user = NULL;
         }
     }
 }
@@ -231,10 +237,23 @@ void free_epc_pages(epc_t *epc)
         if (g_epc_info[i].key == key) {
             g_epc_info[i].key = 0;
             g_epc_info[i].type = FREE_PAGE;
+            g_epc_info[i].user = NULL;
         }
     }
 }
 
+void* epc_to_uaddr(epc_t *epc) {
+    int arg_i=epc-g_epc;
+    int key=g_epc_info[arg_i].key;
+    for (int index=arg_i;index>=0;index--) {
+        if (g_epc_info[index].key!=key) break;
+        if (g_epc_info[index].type==SECS_PAGE) {
+            return (void*)((arg_i-1)*PAGE_SIZE+(long)g_epc_info[index].user);
+        }
+    }
+    return NULL;
+}
+
 #ifdef UNITTEST
 int count_epc(int key)
 {
diff --git a/user/sgx-kern.c b/user/sgx-kern.c
index 0931d33..9756c85 100644
--- a/user/sgx-kern.c
+++ b/user/sgx-kern.c
@@ -13,6 +13,7 @@
 #include <sgx-utils.h>
 #include <sgx-kern-epc.h>
 #include <sgx-crypto.h>
+#include <sgx-kern-dev.h>
 
 #define NUM_THREADS 1
 
@@ -35,35 +36,6 @@ void set_app_token(einittoken_t *token)
     app_token = token;
 }
 
-// encls() : Execute an encls instruction
-// out_regs store the output value returned from qemu
-static
-void encls(encls_cmd_t leaf, uint64_t rbx, uint64_t rcx,
-           uint64_t rdx, out_regs_t* out)
-{
-   sgx_dbg(kern,
-           "leaf=%d, rbx=0x%"PRIx64", rcx=0x%"PRIx64", rdx=0x%"PRIx64")",
-           leaf, rbx, rcx, rdx);
-
-   out_regs_t tmp;
-   asm volatile(".byte 0x0F\n\t"
-                ".byte 0x01\n\t"
-                ".byte 0xcf\n\t"
-                :"=a"(tmp.oeax),
-                 "=b"(tmp.orbx),
-                 "=c"(tmp.orcx),
-                 "=d"(tmp.ordx)
-                :"a"((uint32_t)leaf),
-                 "b"(rbx),
-                 "c"(rcx),
-                 "d"(rdx)
-                :"memory");
-
-    if (out != NULL) {
-        *out = tmp;
-    }
-}
-
 static
 void ECREATE(pageinfo_t *pageinfo, epc_t *epc)
 {
@@ -71,7 +43,7 @@ void ECREATE(pageinfo_t *pageinfo, epc_t *epc)
     // RCX: EPCPAGE(In, EA)
     encls(ENCLS_ECREATE,
           (uint64_t)pageinfo,
-          (uint64_t)epc_to_vaddr(epc),
+          (uint64_t)epc_to_kaddr(epc),
           0x0, NULL);
 }
 
@@ -83,7 +55,7 @@ int EINIT(uint64_t sigstruct, epc_t *secs, uint64_t einittoken)
     // RDX: EINITTOKEN(In, EA)
     // RAX: ERRORCODE(Out)
     out_regs_t out;
-    encls(ENCLS_EINIT, sigstruct, (uint64_t)epc_to_vaddr(secs), einittoken, &out);
+    encls(ENCLS_EINIT, sigstruct, (uint64_t)epc_to_kaddr(secs), einittoken, &out);
     return -(int)(out.oeax);
 }
 
@@ -94,15 +66,15 @@ void EADD(pageinfo_t *pageinfo, epc_t *epc)
     // RCX: EPCPAGE(In, EA)
     encls(ENCLS_EADD,
           (uint64_t)pageinfo,
-          (uint64_t)epc_to_vaddr(epc),
+          (uint64_t)epc_to_kaddr(epc),
           0x0, NULL);
 }
 
 static
-void EEXTEND(uint64_t pageChunk)
+void EEXTEND(uint64_t pageChunk,void* secs)
 {
     // RCX: 256B Page Chunk to be hashed(In, EA)
-    encls(ENCLS_EEXTEND, 0x0, pageChunk, 0x0, NULL);
+    encls(ENCLS_EEXTEND, (uint64_t)secs, pageChunk, 0x0, NULL);
 }
 
 static
@@ -112,7 +84,7 @@ void EAUG(pageinfo_t *pageinfo, epc_t *epc)
     // RCX: EPCPAGE(In, EA)
     encls(ENCLS_EAUG,
           (uint64_t)pageinfo,
-          (uint64_t)epc_to_vaddr(epc),
+          (uint64_t)epc_to_kaddr(epc),
           0x0, NULL);
 }
 
@@ -289,9 +261,9 @@ epc_t *ecreate(int eid, uint64_t enclave_addr, uint64_t enclave_size, bool intel
 }
 
 static
-void measure_enclave_page(uint64_t page_chunk_addr)
+void measure_enclave_page(uint64_t page_chunk_addr,epc_t* secs)
 {
-    EEXTEND(page_chunk_addr);
+    EEXTEND(page_chunk_addr,epc_to_kaddr(secs));
 }
 
 // add (copy) a single page to a epc page
@@ -310,24 +282,24 @@ bool add_page_to_epc(void *page, epc_t *epc, epc_t *secs, page_type_t pt)
         secinfo->flags.x = true;
         // change permissions of a page table entry
         sgx_dbg(kern, "+x to %p", (void *)epc);
-        if (mprotect(epc, PAGE_SIZE, PROT_READ|PROT_WRITE|PROT_EXEC) == -1)
-            err(1, "failed to add executable permission");
+        //if (mprotect(epc, PAGE_SIZE, PROT_READ|PROT_WRITE|PROT_EXEC) == -1)
+        //    err(1, "failed to add executable permission");
     }
 
     pageinfo->srcpge  = (uint64_t)page;
     pageinfo->secinfo = (uint64_t)secinfo;
-    pageinfo->secs    = (uint64_t)epc_to_vaddr(secs);
-    pageinfo->linaddr = (uint64_t)epc_to_vaddr(epc);
+    pageinfo->secs    = (uint64_t)epc_to_kaddr(secs);
+    pageinfo->linaddr = (uint64_t)epc_to_uaddr(epc);
 
-    sgx_dbg(kern, "add/copy %p -> %p", page, epc_to_vaddr(epc));
+    sgx_dbg(kern, "add/copy %p -> %p", page, epc_to_kaddr(epc));
     //if (sgx_dbg_eadd)
     //    hexdump(stderr, page, 32);
 
-    EADD(pageinfo, epc);
+    EADD(pageinfo, epc_to_kaddr(epc));
 
     // for EEXTEND
     for(int i = 0; i < PAGE_SIZE/MEASUREMENT_SIZE; i++)
-        measure_enclave_page((uint64_t)epc_to_vaddr(epc) + i*MEASUREMENT_SIZE);
+        measure_enclave_page((uint64_t)epc_to_kaddr(epc) + i*MEASUREMENT_SIZE,secs);
 
     free(pageinfo);
     free(secinfo);
@@ -347,9 +319,9 @@ bool aug_page_to_epc(epc_t *epc, epc_t *secs)
     pageinfo->srcpge  = 0;
     pageinfo->secinfo = 0;
     pageinfo->secs    = (uint64_t)secs;
-    pageinfo->linaddr = (uint64_t)epc_to_vaddr(epc);
+    pageinfo->linaddr = (uint64_t)epc_to_uaddr(epc);
 
-    EAUG(pageinfo, epc);
+    EAUG(pageinfo, epc_to_kaddr(epc));
 
     free(pageinfo);
 
@@ -480,7 +452,8 @@ int sys_create_enclave(void *base, unsigned int code_pages,
         + code_pages + ssa_npages + stack_npages + heap_npages;
     npages = rop2(npages);
 
-    epc_t *enclave = alloc_epc_pages(npages, eid);
+    void *enclave_addr;
+    epc_t *enclave = alloc_epc_pages(npages, eid, &enclave_addr);
     if (!enclave)
         goto err;
 
@@ -488,15 +461,13 @@ int sys_create_enclave(void *base, unsigned int code_pages,
     int enclave_size = PAGE_SIZE * npages;
     sgx_dbg(kern, "npages: %d enclave size: %x", npages, PAGE_SIZE * npages);
 
-    void *enclave_addr = epc_to_vaddr(enclave);
-
     epc_t *secs = ecreate(eid, (uint64_t)enclave_addr, enclave_size, intel_flag);
     if (!secs)
         goto err;
     kenclaves[eid].secs = secs;
 
     sgx_dbg(info, "enclave addr: %p (size: 0x%x w/ secs = %p)",
-            enclave_addr, enclave_size, epc_to_vaddr(secs));
+            enclave_addr, enclave_size, epc_to_kaddr(secs));
 
     // get epc for TCS
     epc_t *tcs_epc = get_epc(eid, TCS_PAGE);
@@ -507,8 +478,8 @@ int sys_create_enclave(void *base, unsigned int code_pages,
     int ssa_page_offset = sec_npages + tcs_npages + tls_npages + code_pages;
     update_tcs_fields(tcs, tls_page_offset, ssa_page_offset);
 
-    sgx_dbg(info, "add tcs %p (@%p)", (void *)tcs, (void *)epc_to_vaddr(tcs_epc));
-    if (!add_page_to_epc(tcs, epc_to_vaddr(tcs_epc), secs, PT_TCS))
+    sgx_dbg(info, "add tcs %p (@%p)", (void *)tcs, (void *)epc_to_kaddr(tcs_epc));
+    if (!add_page_to_epc(tcs, tcs_epc, secs, PT_TCS))
         goto err;
 
     // allocate TLS pages
@@ -568,7 +539,7 @@ int sys_create_enclave(void *base, unsigned int code_pages,
     free_reserved_epc_pages(enclave);
 
     // update per-enclave info
-    kenclaves[eid].tcs = epc_to_vaddr(tcs_epc);
+    kenclaves[eid].tcs = epc_to_uaddr(tcs_epc);
     kenclaves[eid].enclave = (uint64_t)enclave;
 
     kenclaves[eid].kout_n++;
@@ -630,7 +601,7 @@ void test_ecreate(pageinfo_t *pageinfo, epc_t *epc)
     // RCX: EPCPAGE(In, EA)
     encls(ENCLS_ECREATE,
           (uint64_t)pageinfo,
-          (uint64_t)epc_to_vaddr(epc),
+          (uint64_t)epc_to_kaddr(epc),
           0x0, NULL);
 }
 
@@ -651,7 +622,7 @@ void test_eadd(pageinfo_t *pageinfo, epc_t *epc)
     // RCX: EPCPAGE(In, EA)
     encls(ENCLS_EADD,
           (uint64_t)pageinfo,
-          (uint64_t)epc_to_vaddr(epc),
+          (uint64_t)epc_to_kaddr(epc),
           0x0, NULL);
 }
 
@@ -667,7 +638,7 @@ void test_eaug(pageinfo_t *pageinfo, epc_t *epc)
     // RCX: EPCPAGE(In, EA)
     encls(ENCLS_EAUG,
           (uint64_t)pageinfo,
-          (uint64_t)epc_to_vaddr(epc),
+          (uint64_t)epc_to_kaddr(epc),
           0x0, NULL);
 }
 
